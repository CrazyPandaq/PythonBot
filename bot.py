import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, filters
from credentials import ChatGPT_TOKEN, BOT_TOKEN
from gpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu,
                  default_callback_handler, load_prompt, send_text_buttons, Dialog)


#–ù–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /start | {datetime.datetime.now()}")
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translate' : '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üåç',
        'recipes' : '–ü–æ–º–æ—â—å —Å –≥–æ—Ç–æ–≤–∫–æ–π üç¥'
    })

# 1 –ó–∞–¥–∞–Ω–∏–µ
#–†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç
async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /random_fact | {datetime.datetime.now()}")
    prompt = load_prompt('random')
    message = load_message('random')
    await send_image(update,context,'random')
    await send_text(update, context, message)
    answer = await chat_gpt.send_question(prompt,'')
    await send_text_buttons(update, context, answer, {
        'random_more': '–•–æ—á—É –µ—â–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç',
        'random_end': '–í—ã–π—Ç–∏'
    })

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ñ–∞–∫—Ç–µ
async def random_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'random_more':
        await random_fact(update, context)
    else:
        await start(update, context)

# 2 –ó–∞–¥–∞–Ω–∏–µ
#GPT
async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /gpt | {datetime.datetime.now()}")
    dialog.mode = 'gpt'
    prompt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(prompt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)

async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update,context, '–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(text)
    #print(f"GPT Response: {answer}")
    await message.edit_text(answer)
    await send_text_buttons(update, context, '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', {
        'gpt_more': '–•–æ—á—É –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å!',
        'gpt_end': '–í—ã–π—Ç–∏'
    })

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —Å gpt
async def gpt_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'gpt_more':
        await gpt(update, context)
    else:
        await start(update, context)

# 3 –ó–∞–¥–∞–Ω–∏–µ
#–†–∞–∑–≥–æ–≤–æ—Ä —Å –ª–∏—á–Ω–æ—Å—Ç—å—é - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /talk | {datetime.datetime.now()}")
    dialog.mode = 'talk'
    message = load_message('talk')
    await send_image(update,context,'talk')
    await send_text_buttons(update, context, message, {
        'talk_cobain': '–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω',
        'talk_queen': '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ II',
        'talk_tolkien': '–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω',
        'talk_nietzsche': '–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ',
        'talk_hawking': '–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥'
    })

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –º–µ–Ω—é
async def talk_button(update:Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'talk_another':
        await talk(update, context)
    elif cb == 'talk_end':
        await start(update, context)
    else:
        prompt = load_prompt(cb)
        chat_gpt.set_prompt(prompt)
        answer = await chat_gpt.send_question(prompt, '')
        await send_image(update, context, cb)
        await send_text(update, context, answer)


#–†–∞–∑–≥–æ–≤–æ—Ä —Å –ª–∏—á–Ω–æ—Å—Ç—å—é
async def talk_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...')
    answer = await chat_gpt.add_message(text)
    await message.edit_text(answer)
    await send_text_buttons(update, context, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", {
        'talk_another': '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å',
        'talk_end': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä'
    })


# 4 –ó–∞–¥–∞–Ω–∏–µ
#–ö–í–ò–ó
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'quiz'
    if not context.user_data:
        context.user_data['current_mode'] = None
        context.user_data['quiz'] = None
        context.user_data['count'] = 0
    message = load_message('quiz')
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context, message, {
        'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python',
        'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏',
        'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è'
    })


async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'quiz_more':
        cb = context.user_data['current_mode']
    elif cb == 'quiz_another':
        await quiz(update, context)
        return
    elif cb == 'quiz_exit':
        await send_text(update, context, f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context.user_data.get("count", 0)}')
        context.user_data['current_mode'] = None
        context.user_data['quiz'] = None
        context.user_data['count'] = 0
        await start(update, context)
        return
    context.user_data['current_mode'] = cb
    prompt = load_prompt('quiz')
    answer = await chat_gpt.send_question(prompt, cb)
    await send_text(update, context, answer)
    context.user_data['quiz'] = 'next'

async def quiz_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data['current_mode'] or not context.user_data['quiz']:
        return
    context.user_data['quiz'] = None
    text = update.message.text
    answer = await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        context.user_data['count'] += 1
    await send_text_buttons(update, context, answer, {
        'quiz_more': '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
        'quiz_another': '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É',
        'quiz_exit': '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
    })


# 5 –ó–∞–¥–∞–Ω–∏–µ
#–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /translate | {datetime.datetime.now()}")
    dialog.mode = 'translate'
    await send_image(update, context, 'translate')
    message = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç:"
    languages = {
        'translate_en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'translate_de': '–ù–µ–º–µ—Ü–∫–∏–π',
        'translate_fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
        'translate_es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
        'translate_ru': '–†—É—Å—Å–∫–∏–π',
        'translate_ch': '–ö–∏—Ç–∞–π—Å–∫–∏–π'
    }
    await send_text_buttons(update, context, message,languages)

async def translate_language_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'translate_another':
        await translate(update, context)
        return
    elif cb == 'translate_end':
        await start(update,context)
        return

    prompt = load_prompt(cb)
    chat_gpt.set_prompt(prompt)
    #print(prompt)
    language_map = {
        'translate_en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
        'translate_de': '–ù–µ–º–µ—Ü–∫–∏–π',
        'translate_fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
        'translate_es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
        'translate_ru': '–†—É—Å—Å–∫–∏–π',
        'translate_ch': '–ö–∏—Ç–∞–π—Å–∫–∏–π'
    }
    selected_language = language_map.get(cb, '–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ –∏–∑ —Å–ø–∏—Å–∫–∞')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    await send_text(update, context, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —è–∑—ã–∫: {selected_language}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:')

async def translate_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    message = await send_text(update, context, '–ü–µ—Ä–µ–≤–æ–∂—É...')
    answer = await chat_gpt.add_message(text)
    #await message.edit_text(answer)
    await send_text_buttons(update, context, answer, {
        'translate_another' : '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫',
        'translate_end': '–ó–∞–∫–æ–Ω—á–∏—Ç—å'
    })


# 6 –ó–∞–¥–∞–Ω–∏–µ
#–ü–æ–º–æ—â—å —Å –≥–æ—Ç–æ–≤–∫–æ–π
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
async def recipes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"User {update.effective_user.full_name} called /recipes | {datetime.datetime.now()}")
    dialog.mode = 'recipes'
    message = ("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –∫—É—Ö–Ω–µ –∏ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π —á—Ç–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏ üêæ. "
               "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å –∏  —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å —Ä–µ—Ü–µ–ø—Ç—ã.")
    await send_image(update, context, 'recipes')
    await send_text(update, context, message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
async def recipes_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ingredients = update.message.text
    message = await send_text(update, context, '–ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã...')
    prompt = f"–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å —á—Ç–æ —Ç—ã –ø–æ–≤–∞—Ä. –°–æ—Å—Ç–∞–≤—å ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {ingredients}. –ü—Ä–∏–¥—É–º–∞–π 2-3 —Ä–µ—Ü–µ–ø—Ç–∞, —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º."
    recept = await chat_gpt.send_question(prompt, '')
    await message.edit_text(recept)
    await send_text_buttons(update, context, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", {
        'recipes_another': '–ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã',
        'recipes_end': '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    })


async def recipes_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'recipes_another':
        await recipes(update, context)
    elif cb == 'recipes_end':
        await start(update, context)


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'{update.message.text} - {update.effective_user.full_name} | {datetime.datetime.now()}')
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await talk_dialog(update, context)
    elif dialog.mode == 'quiz':
        await quiz_dialog(update, context)
    elif dialog.mode == 'translate':
        await translate_dialog(update,context)
    elif dialog.mode == 'recipes':
        await recipes_dialog(update,context)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=update.message.text)


chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(BOT_TOKEN).build()

dialog = Dialog()
dialog.mode = None

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, recipes_dialog))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random_fact))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('translate', translate))
app.add_handler(CommandHandler('recipes', recipes))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –º–æ–∂–Ω–æ —Ç–∞–∫:
app.add_handler(CallbackQueryHandler(random_button, pattern='^random_.*'))
app.add_handler(CallbackQueryHandler(gpt_button, pattern='^gpt_.*'))
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz_.*'))
app.add_handler(CallbackQueryHandler(translate_language_button, pattern='^translate_.*'))
app.add_handler(CallbackQueryHandler(recipes_button, pattern='^recipes_.*'))

app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
